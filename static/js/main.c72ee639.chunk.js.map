{"version":3,"sources":["components/cards/cards.module.css","style/Header.module.css","components/navigation/Navigation.module.css","components/tableSidebar/tableSidebar.module.css","components/404/Page_error_404.module.css","components/customInput/CustomInputText.module.css","style/Popup.module.css","style/App.module.css","style/Login.module.css","style/Registrations.module.css","style/Preloader.module.css","components/table/Range.module.css","style/CustomButton.module.css","components/table/Table.module.css","style/Common.module.css","enum/pathes.ts","enum/requestStatus.ts","enum/actions/actionsSignUp.ts","components/customInput/CustomInput.tsx","hooks/useAppDispatch.ts","components/table/decksTC.tsx","hooks/useAppSelector.ts","hooks/useInput/useInput.ts","utils/emailValidation.ts","utils/passwordValidation.ts","utils/createRangedArray.ts","hooks/usePagination.ts","api/apiConfig/index.ts","api/cardsApi.ts","store/reducers/errorReducer.ts","store/reducers/profile.ts","api/loginApi.ts","store/reducers/login.ts","store/reducers/appInitialized.ts","store/reducers/cards.ts","api/forgotPasswordApi.ts","store/reducers/signUp.ts","store/selectors/login/loginSelectors.ts","store/selectors/app/appSelectors.ts","store/selectors/confirmPassword/errorSelectors.ts","store/selectors/signUp/signUpSelectors.ts","components/loginPage/Login.tsx","assets/avatar.png","components/profile/Profile.tsx","components/registrations/signUp.tsx","constants/Navigation/appNavigation.ts","assets/preloader1.gif","components/preloader/Preloader.tsx","components/table/decksApi.ts","components/pagination/Pagination.tsx","components/table/Table.tsx","components/table/Range.tsx","components/tableSidebar/TableSidebar.tsx","components/customButton/CustomButton.tsx","components/confirmPassword/ConfirmPassword.tsx","assets/error404.gif","store/middlewares/forgotPassAddEmailTC.ts","components/confirmPassword/CreateNewPassword.tsx","store/middlewares/forgotPassSetPassTC.ts","assets/letter.png","components/confirmPassword/Popup.tsx","components/cards/Cards.tsx","components/Header/Header.tsx","components/cards/Card.tsx","components/Routes/RoutesPart.tsx","App.tsx","reportWebVitals.ts","store/store.ts","index.tsx"],"names":["module","exports","PATH","requestStatus","REGISTRATION","CustomInput","memo","placeholder","typeInput","className","value","onChange","name","s","inputWrap","size","type","input","autoComplete","spellCheck","PACKS_AC","useAppSelector","useSelector","useInput","initialValue","useState","setValue","handleValue","useCallback","e","target","resetValue","isEmailValid","email","test","isPasswordValid","password","createRangedArray","start","end","length","Array","from","_","idx","DOTS","instance","axios","create","baseURL","process","withCredentials","cardsAPI","cardsPackId","get","_id","delete","card","post","updateCard","put","initialState","errorValidation","errorNetwork","setErrorMessagePassAC","setErrorMessageNetworkAC","avatar","publicCardPacksCount","isAdmin","rememberMe","error","setUserProfileAC","profile","authAPI","params","profileAPI","paramsUpdate","isAuth","setAuthLoginDataAC","status","idle","isInitialized","setAppStatusAC","cards","answer","question","cardsTotalCount","grade","shots","maxGrade","minGrade","page","pageCount","packUserId","addNewPassAPI","isSignUp","signUpTC","dispatch","loading","then","isSignUpSuccessful","IsSuccessful","succeeded","catch","response","data","message","setTimeout","finally","getIsDataLoaded","state","login","getStatus","app","getErrorNetworkMessage","errorMessage","getErrorValidMessage","getIsSignUp","signUp","Login","handleRememberMe","handleEmail","resetEmail","handlePassword","resetPassword","useDispatch","isDataLoaded","isLoading","errorPassMessage","errorNetworkMessage","to","PROFILE","style","mainContainer","CircularProgress","content","color","styleLogin","rememberMeInput","checked","currentTarget","CONFIRM_PASSWORD","minWidth","CustomButton","title","onClick","res","disabled","Profile","userData","profilePage","setName","editMode","setEditMode","alt","src","noneAvatarImage","inputName","event","onBlur","user","updatedUser","display","cursor","onDoubleClick","textDecoration","PACKS","LOGIN","SignUp","confirmPassword","handleConfirmPassword","resetConfirmPassword","styleRegister","btns","POPUP","CREATE_NEW_PASSWORD","CARDS","PAGE_404","Preloader","stylePreloader","loader","preloader1","decksAPI","cardsPack","id","cardPacks","cardPacksTotalCount","maxCardsCount","minCardsCount","fetchDecksAC","payload","SET_DECKS","removeDeckTC","REMOVE_DECK","deleteDeckAC","addDeckTC","dataPayload","deck","newCardsPack","ADD_DECK","addDeckAC","Pagination","props","onPageChange","totalCount","siblingCount","currentPage","pageSize","paginationRange","useMemo","totalPageCount","Math","ceil","leftSiblingIndex","max","rightSiblingIndex","min","shouldShowLeftDots","shouldShowRightDots","firstPageIndex","lastPageIndex","leftRange","rightRange","middleRange","usePagination","lastPage","ulClassName","map","pageNumber","listItemClassName","random","toString","Table","searchName","setSearchName","decks","perPage","useEffect","getState","resultPacks","pack","styleTable","table","tableEl","tableElSmall","cardsCount","user_name","updated","justifyContent","TableSidebar","tableWrapper","header","inputBlock","SET_CURRENT_PAGE","SuperRange","number","setNumber","range","React","myPacks","filter","tableSidebar","pickBlock","header3","buttonsContainer","user_id","styleCustomButton","button","ConfirmPassword","isShown","setShowMessage","inputCentering","forgotPassAddEmailTC","CreateNewPassword","isLoadedData","setLoadedData","newPassword","handleNewPassword","resetNewPassword","token","useParams","resetPasswordToken","forgotPassSetPassTC","Popup","stylePopup","letterImg","letter","contentWrap","heading","Cards","userId","cardsPack_id","onClickRemoveCard","removeCardAC","removeCardTC","onClickUpdateCard","updateCardAC","updateCardTC","resultCards","created","width","margin","newCard","curPage","Header","styleHeader","containerHeader","btnHeader","link","Card","handleQuestion","handleAnswer","navigate","useNavigate","contentCard","container","textarea","buttons","btn","RoutesPart","path","element","CARD","App","styleApp","layout","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","c","UPDATE_DECK","SET_TOTAL_COUNT","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c72ee639.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contentCard\":\"cards_contentCard__N4xwP\",\"textarea\":\"cards_textarea__3Hlt6\",\"buttons\":\"cards_buttons__5A5kT\",\"btn\":\"cards_btn__3SXI4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"containerHeader\":\"Header_containerHeader__12l-l\",\"btnHeader\":\"Header_btnHeader__1N2oh\",\"link\":\"Header_link__g119H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navigation_nav__2GkZc\",\"wrap\":\"Navigation_wrap__1Oj7W\",\"listItem\":\"Navigation_listItem__1n_qa\",\"navElement\":\"Navigation_navElement__3yTtN\",\"p\":\"Navigation_p__9Bxcc\",\"navList\":\"Navigation_navList__MoajE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tableSidebar\":\"tableSidebar_tableSidebar__3zSYr\",\"buttonsContainer\":\"tableSidebar_buttonsContainer__31arA\",\"header3\":\"tableSidebar_header3__1Sf58\",\"pickBlock\":\"tableSidebar_pickBlock__1Lg3I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContainer\":\"Page_error_404_mainContainer__1vD0a\",\"linkContainer\":\"Page_error_404_linkContainer__3UbHO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputWrap\":\"CustomInputText_inputWrap__1KA3C\",\"input\":\"CustomInputText_input__1q06b\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"letterImg\":\"Popup_letterImg__ySxsi\",\"errorImg\":\"Popup_errorImg__2___N\",\"heading\":\"Popup_heading__bIiLx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__N6O5I\",\"preloaderWrap\":\"App_preloaderWrap__2ng0q\",\"layout\":\"App_layout__hmE6L\",\"main\":\"App_main__30WjN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"rememberMeInput\":\"Login_rememberMeInput__oVKsa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btns\":\"Registrations_btns__DEHYN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Preloader_loader__Z9Y8w\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"range\":\"Range_range__psGW-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"CustomButton_button__27uQo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tableEl\":\"Table_tableEl__1R9R5\",\"tableElSmall\":\"Table_tableElSmall__3isRN\",\"table\":\"Table_table__2QR6f\",\"tableWrapper\":\"Table_tableWrapper__1Kb6a\",\"inputBlock\":\"Table_inputBlock__1MoT9\",\"content\":\"Table_content__1E_IL\",\"header\":\"Table_header__3jBLb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContainer\":\"Common_mainContainer__1bjZI\",\"content\":\"Common_content__tquPi\",\"btn\":\"Common_btn__307UN\",\"inputEmail\":\"Common_inputEmail__1-80l\",\"inputPassword\":\"Common_inputPassword__3HePI\",\"inputName\":\"Common_inputName__2kdyi\",\"inputCentering\":\"Common_inputCentering__3ia0a\",\"avatar\":\"Common_avatar__JqzM_\"};","export enum PATH {\r\n  REGISTRATION = '/registration',\r\n  LOGIN = '/login',\r\n  PROFILE = '/',\r\n  CONFIRM_PASSWORD = '/confirmPassword',\r\n  POPUP = '/popup',\r\n  CREATE_NEW_PASSWORD = '/createNewPassword',\r\n  PAGE_404 = '/*',\r\n  CARDS = '/cards',\r\n  CARD = '/card',\r\n  PACKS = '/table',\r\n}\r\n","export enum requestStatus {\r\n  idle = 'idle',\r\n  loading = 'loading',\r\n  succeeded = 'succeeded',\r\n  failed = 'failed',\r\n}\r\n","export enum REGISTRATION {\r\n  IsSuccessful = 'REGISTRATION/IS_SIGNUP_SUCCESSFUL',\r\n}\r\n","import { ChangeEvent, memo } from 'react';\r\n\r\nimport s from './CustomInputText.module.css';\r\n\r\nimport { ReturnComponentType } from 'types';\r\n\r\ntype InputProps = {\r\n  placeholder: string;\r\n  typeInput: string;\r\n  className?: string;\r\n  onChange: (e: ChangeEvent<HTMLInputElement>) => void;\r\n  value: string;\r\n  name?: string;\r\n};\r\n\r\nexport const CustomInput = memo(\r\n  ({\r\n    placeholder,\r\n    typeInput,\r\n    className,\r\n    value,\r\n    onChange,\r\n    name,\r\n  }: InputProps): ReturnComponentType => (\r\n    <div className={s.inputWrap}>\r\n      <input\r\n        size={40}\r\n        type={typeInput}\r\n        name={name}\r\n        value={value}\r\n        onChange={onChange}\r\n        placeholder={placeholder}\r\n        className={className ?? s.input}\r\n        autoComplete=\"off\"\r\n        spellCheck={false}\r\n        aria-autocomplete=\"list\"\r\n      />\r\n    </div>\r\n  ),\r\n);\r\n","import { useDispatch } from 'react-redux';\r\n\r\nimport { AppDispatch } from 'store/types';\r\n\r\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\n","import { AxiosError } from 'axios';\r\nimport { Dispatch } from 'redux';\r\n\r\nimport { AppThunk } from '../../types/AppThunkType';\r\n\r\nimport { addNewDeckType, decksAPI } from './decksApi';\r\n\r\nimport { requestStatus } from 'enum';\r\nimport { setErrorMessageNetworkAC } from 'store';\r\nimport { setAppStatusAC } from 'store/reducers';\r\n\r\nexport enum PACKS_AC {\r\n  SET_CURRENT_PAGE = 'SET_CURRENT_PAGE',\r\n  ADD_DECK = 'ADD_DECK',\r\n  REMOVE_DECK = 'REMOVE_DECK',\r\n  SET_TOTAL_COUNT = 'SET_TOTAL_COUNT',\r\n  SET_DECKS = 'SET_DECKS',\r\n  UPDATE_DECK = 'UPDATE_DECK',\r\n}\r\n\r\nexport type deckTemplate = {\r\n  _id: string;\r\n  userId?: string | undefined;\r\n  name?: string;\r\n  path?: string;\r\n  cardsCount?: number;\r\n  grade?: number;\r\n  shots?: number;\r\n  rating?: number;\r\n  type?: string;\r\n  created?: string;\r\n  updated?: string;\r\n  __v?: number;\r\n  user_name?: string;\r\n};\r\n\r\nexport type ResponseDeckType = {\r\n  cardPacks: deckTemplate[];\r\n  cardPacksTotalCount: number; // totalCount\r\n  maxCardsCount: number;\r\n  minCardsCount: number;\r\n  page: number; // currentPage\r\n  pageCount: number; // perPage\r\n};\r\nconst initialState: ResponseDeckType = {\r\n  cardPacks: [],\r\n  cardPacksTotalCount: 0,\r\n  maxCardsCount: 0,\r\n  minCardsCount: 0,\r\n  page: 1,\r\n  pageCount: 10,\r\n};\r\n\r\nexport const decksReducer = (\r\n  state: ResponseDeckType = initialState,\r\n  action: ActionsType,\r\n): ResponseDeckType => {\r\n  switch (action.type) {\r\n    case PACKS_AC.SET_DECKS:\r\n      return { ...state, ...action.payload };\r\n    case PACKS_AC.REMOVE_DECK:\r\n      return {\r\n        ...state,\r\n        cardPacks: state.cardPacks.filter(deck => deck._id !== action.id),\r\n      };\r\n    case PACKS_AC.ADD_DECK:\r\n      return { ...state, cardPacks: [action.deck, ...state.cardPacks] };\r\n    case PACKS_AC.UPDATE_DECK:\r\n      return {\r\n        ...state,\r\n        cardPacks: state.cardPacks.map(deck =>\r\n          deck._id === action.id ? { ...deck, name: action.title } : deck,\r\n        ),\r\n      };\r\n    case PACKS_AC.SET_CURRENT_PAGE:\r\n      return { ...state, page: action.pageNumber };\r\n\r\n    case PACKS_AC.SET_TOTAL_COUNT:\r\n      return { ...state, cardPacksTotalCount: action.cardPacksTotalCount };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// actions\r\nexport const fetchDecksAC = (payload: any) =>\r\n  ({\r\n    type: PACKS_AC.SET_DECKS,\r\n    payload,\r\n  } as const);\r\n\r\nexport const deleteDeckAC = (id: string) =>\r\n  ({\r\n    type: PACKS_AC.REMOVE_DECK,\r\n    id,\r\n  } as const);\r\nexport const addDeckAC = (deck: any) =>\r\n  ({\r\n    type: PACKS_AC.ADD_DECK,\r\n    deck,\r\n  } as const);\r\n\r\nexport const upDateDeckAC = (title: any, id: string) =>\r\n  ({\r\n    type: PACKS_AC.UPDATE_DECK,\r\n    title,\r\n    id,\r\n  } as const);\r\nexport const setCurrentPageAC = (pageNumber: number) =>\r\n  ({\r\n    type: PACKS_AC.SET_CURRENT_PAGE,\r\n    pageNumber,\r\n  } as const);\r\n\r\nexport const setTotalCountAC = (cardPacksTotalCount: number) =>\r\n  ({ type: PACKS_AC.SET_TOTAL_COUNT, cardPacksTotalCount } as const);\r\n\r\ntype ActionsType =\r\n  | ReturnType<typeof fetchDecksAC>\r\n  | ReturnType<typeof deleteDeckAC>\r\n  | ReturnType<typeof addDeckAC>\r\n  | ReturnType<typeof upDateDeckAC>\r\n  | ReturnType<typeof setCurrentPageAC>\r\n  | ReturnType<typeof setTotalCountAC>;\r\n\r\n// thunk\r\n\r\nexport const setDecksTC = (): AppThunk => (dispatch: Dispatch, getState) => {\r\n  const { page, pageCount } = getState().decks;\r\n  dispatch(setAppStatusAC(requestStatus.loading));\r\n  decksAPI\r\n    .getPacks({ page, pageCount })\r\n    .then(res => {\r\n      dispatch(fetchDecksAC(res.data));\r\n      dispatch(setAppStatusAC(requestStatus.succeeded));\r\n    })\r\n    .catch((e: AxiosError) => {\r\n      dispatch(setAppStatusAC(requestStatus.succeeded));\r\n      const errorNetwork = e.response\r\n        ? e.response.data.error\r\n        : `${e.message}, more details in the console`;\r\n      dispatch(setErrorMessageNetworkAC(errorNetwork));\r\n    });\r\n};\r\nexport const setMyDecksTC = (): AppThunk => (dispatch: Dispatch, getState) => {\r\n  const { page, pageCount } = getState().decks;\r\n  const { _id } = getState().profilePage;\r\n  dispatch(setAppStatusAC(requestStatus.loading));\r\n  decksAPI\r\n    .getPacks({ page, pageCount, user_id: _id })\r\n    .then(res => {\r\n      dispatch(fetchDecksAC(res.data));\r\n      dispatch(setAppStatusAC(requestStatus.succeeded));\r\n    })\r\n    .catch((e: AxiosError) => {\r\n      dispatch(setAppStatusAC(requestStatus.succeeded));\r\n      const errorNetwork = e.response\r\n        ? e.response.data.error\r\n        : `${e.message}, more details in the console`;\r\n      dispatch(setErrorMessageNetworkAC(errorNetwork));\r\n    });\r\n};\r\nexport const removeDeckTC = (id: string) => (dispatch: Dispatch) => {\r\n  dispatch(setAppStatusAC(requestStatus.loading));\r\n  decksAPI\r\n    .removeDeck(id)\r\n    .then(() => {\r\n      dispatch(deleteDeckAC(id));\r\n      dispatch(setAppStatusAC(requestStatus.succeeded));\r\n    })\r\n    .catch((e: AxiosError) => {\r\n      dispatch(setAppStatusAC(requestStatus.succeeded));\r\n      const errorNetwork = e.response\r\n        ? e.response.data.error\r\n        : `${e.message}, more details in the console`;\r\n      dispatch(setErrorMessageNetworkAC(errorNetwork));\r\n    });\r\n};\r\n\r\nexport const addDeckTC = (dataPayload: addNewDeckType) => (dispatch: Dispatch) => {\r\n  dispatch(setAppStatusAC(requestStatus.loading));\r\n  decksAPI\r\n    .addNewDeck(dataPayload)\r\n    .then(res => {\r\n      const deck = res.data.newCardsPack;\r\n      dispatch(addDeckAC(deck));\r\n      dispatch(setAppStatusAC(requestStatus.succeeded));\r\n    })\r\n    .catch((e: AxiosError) => {\r\n      dispatch(setAppStatusAC(requestStatus.succeeded));\r\n      const errorNetwork = e.response\r\n        ? e.response.data.error\r\n        : `${e.message}, more details in the console`;\r\n      dispatch(setErrorMessageNetworkAC(errorNetwork));\r\n    });\r\n};\r\n\r\nexport const upDateDeckTC = (title: any, _id: string) => (dispatch: Dispatch) => {\r\n  dispatch(setAppStatusAC(requestStatus.loading));\r\n  decksAPI\r\n    .updateDeck({ _id })\r\n    .then(() => {\r\n      dispatch(upDateDeckAC(title, _id));\r\n      dispatch(setAppStatusAC(requestStatus.succeeded));\r\n    })\r\n    .catch((e: AxiosError) => {\r\n      dispatch(setAppStatusAC(requestStatus.succeeded));\r\n      const errorNetwork = e.response\r\n        ? e.response.data.error\r\n        : `${e.message}, more details in the console`;\r\n      dispatch(setErrorMessageNetworkAC(errorNetwork));\r\n    });\r\n};\r\n","import { TypedUseSelectorHook, useSelector } from 'react-redux';\r\n\r\nimport { RootStateType } from 'store/types';\r\n\r\nexport const useAppSelector: TypedUseSelectorHook<RootStateType> = useSelector;\r\n","import { ChangeEvent, useCallback, useState } from 'react';\r\n\r\nexport const useInput = (initialValue: string): any => {\r\n  const [value, setValue] = useState(initialValue);\r\n\r\n  const handleValue = useCallback(\r\n    (e: ChangeEvent<HTMLInputElement>) => setValue(e.target.value),\r\n    [],\r\n  );\r\n\r\n  const resetValue = useCallback(() => setValue(initialValue), [initialValue]);\r\n\r\n  return { value, handleValue, resetValue };\r\n};\r\n","export const isEmailValid = (email: string): boolean => {\r\n  const EMAIL_REGEX =\r\n    /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n  return EMAIL_REGEX.test(email);\r\n};\r\n","export const isPasswordValid = (password: string): boolean => {\r\n  const PASSWORD_REGEX = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z]{8,}$/;\r\n  return PASSWORD_REGEX.test(password);\r\n};\r\n/* /^\r\n  (?=.*\\d)          // should contain at least one digit\r\n  (?=.*[a-z])       // should contain at least one lower case\r\n  (?=.*[A-Z])       // should contain at least one upper case\r\n  [a-zA-Z0-9]{8,}   // should contain at least 8 from the mentioned characters\r\n$/ */\r\n","export const createRangedArray = (start: number, end: number): number[] => {\r\n  // eslint-disable-next-line @typescript-eslint/no-magic-numbers\r\n  const length = end - start + 1;\r\n  /*\r\n  \tCreate an array of certain length and set the elements within it from\r\n    start value to end value.\r\n  */\r\n  return Array.from({ length }, (_, idx) => idx + start);\r\n};\r\n","/* eslint-disable @typescript-eslint/no-magic-numbers */\r\n\r\nimport { useMemo } from 'react';\r\n\r\nimport { createRangedArray } from 'utils';\r\n\r\nexport const DOTS = '...';\r\n\r\nexport type UsePaginationType = {\r\n  totalCount: number;\r\n  pageSize: number;\r\n  siblingCount: number;\r\n  currentPage: number;\r\n};\r\n\r\nexport const usePagination = ({\r\n  totalCount,\r\n  pageSize,\r\n  siblingCount = 1,\r\n  currentPage,\r\n}: UsePaginationType): any =>\r\n  useMemo(() => {\r\n    const totalPageCount = Math.ceil(totalCount / pageSize);\r\n\r\n    // Pages count is determined as siblingCount + firstPage + lastPage + currentPage + 2*DOTS\r\n    const totalPageNumbers = siblingCount + 5;\r\n\r\n    /*\r\n          Case 1:\r\n          If the number of pages is less than the page numbers we want to show in our\r\n          paginationComponent, we return the range [1..totalPageCount]\r\n        */\r\n    if (totalPageNumbers >= totalPageCount) {\r\n      return createRangedArray(1, totalPageCount);\r\n    }\r\n\r\n    /*\r\n            Calculate left and right sibling index and make sure they are within range 1 and totalPageCount\r\n        */\r\n    const leftSiblingIndex = Math.max(currentPage - siblingCount, 1);\r\n    const rightSiblingIndex = Math.min(currentPage + siblingCount, totalPageCount);\r\n\r\n    /*\r\n          We do not show dots just when there is just one page number to be inserted between the extremes of sibling and the page limits i.e 1 and totalPageCount. Hence we are using leftSiblingIndex > 2 and rightSiblingIndex < totalPageCount - 2\r\n        */\r\n    const shouldShowLeftDots = leftSiblingIndex > 2;\r\n    const shouldShowRightDots = rightSiblingIndex < totalPageCount - 2;\r\n\r\n    const firstPageIndex = 1;\r\n    const lastPageIndex = totalPageCount;\r\n\r\n    /*\r\n            Case 2: No left dots to show, but rights dots to be shown\r\n        */\r\n    if (!shouldShowLeftDots && shouldShowRightDots) {\r\n      const leftItemCount = 3 + 2 * siblingCount;\r\n      const leftRange = createRangedArray(1, leftItemCount);\r\n\r\n      return [...leftRange, DOTS, totalPageCount];\r\n    }\r\n\r\n    /*\r\n            Case 3: No right dots to show, but left dots to be shown\r\n        */\r\n    if (shouldShowLeftDots && !shouldShowRightDots) {\r\n      const rightItemCount = 3 + 2 * siblingCount;\r\n      const rightRange = createRangedArray(\r\n        totalPageCount - rightItemCount + 1,\r\n        totalPageCount,\r\n      );\r\n      return [firstPageIndex, DOTS, ...rightRange];\r\n    }\r\n\r\n    /*\r\n            Case 4: Both left and right dots to be shown\r\n        */\r\n    if (shouldShowLeftDots && shouldShowRightDots) {\r\n      const middleRange = createRangedArray(leftSiblingIndex, rightSiblingIndex);\r\n      return [firstPageIndex, DOTS, ...middleRange, DOTS, lastPageIndex];\r\n    }\r\n    return [];\r\n  }, [totalCount, pageSize, siblingCount, currentPage]);\r\n","import axios from 'axios';\r\n\r\nconst baseUrl = process.env.REACT_APP_BASE_URL; // Достаем базовый юрл из .env(ссылка на хироку)\r\n\r\nexport const instance = axios.create({\r\n  baseURL: baseUrl,\r\n  withCredentials: true,\r\n});\r\n","import { AxiosResponse } from 'axios';\r\n\r\nimport { Nullable } from '../types';\r\n\r\nimport { instance } from './apiConfig';\r\n\r\nexport const cardsAPI = {\r\n  getCards(cardsPackId: string) {\r\n    return instance.get<ResponseType>(`cards/card?cardsPack_id=${cardsPackId}`);\r\n  },\r\n  deleteCard(_id: string) {\r\n    return instance.delete<AxiosResponse<ResponseType>>(`cards/card?id=${_id}`);\r\n  },\r\n  addNewCard(card: AddCardType) {\r\n    return instance.post<cardType, AxiosResponse<any>>('cards/card', { card });\r\n  },\r\n  updateCard(updateCard: updateCardType) {\r\n    return instance.put<updateCardType, any>('cards/card', { updateCard });\r\n  },\r\n};\r\n\r\n// types\r\n\r\nexport type AddCardType = {\r\n  cardsPack_id?: string;\r\n  answer?: Nullable<string>;\r\n  /* answer: string;\r\n  question: string; */\r\n  /* grade: number;\r\n  shots: number; */\r\n};\r\n\r\nexport type cardType = {\r\n  _id: string;\r\n  user_id: string;\r\n  answer: string;\r\n  question: string;\r\n  cardsPack_id: string;\r\n  grade?: number;\r\n  shots?: number;\r\n  rating?: number;\r\n  type?: string;\r\n  created?: string;\r\n  updated?: string;\r\n  __v?: number;\r\n};\r\nexport type ResponseType = {\r\n  cards: cardType[];\r\n  cardsTotalCount: number;\r\n  maxGrade: number;\r\n  minGrade: number;\r\n  page: number;\r\n  pageCount: number;\r\n  packUserId: string;\r\n};\r\n\r\nexport type updateCardType = {\r\n  _id: string;\r\n  cardsPackId: string;\r\n};\r\n","import { Nullable } from 'types';\r\n\r\nexport type InitialStateDataType = {\r\n  errorValidation?: Nullable<string>;\r\n  errorNetwork?: Nullable<string>;\r\n};\r\n\r\nconst initialState: InitialStateDataType = {\r\n  errorValidation: null,\r\n  errorNetwork: null,\r\n};\r\n\r\nexport const errorForgotPasswordReducer = (\r\n  state: InitialStateDataType = initialState,\r\n  action: ActionTypes,\r\n): InitialStateDataType => {\r\n  switch (action.type) {\r\n    case 'FORGOT_PASSWORD/SET_VALIDATION_ERROR_MESSAGE':\r\n      return {\r\n        ...state,\r\n        errorValidation: action.errorValidation,\r\n      };\r\n    case 'FORGOT_PASSWORD/SET_NETWORK_ERROR_MESSAGE':\r\n      return {\r\n        ...state,\r\n        errorNetwork: action.errorNetwork,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const setErrorMessagePassAC = (errorValidation: Nullable<string>) =>\r\n  ({ type: 'FORGOT_PASSWORD/SET_VALIDATION_ERROR_MESSAGE', errorValidation } as const);\r\n\r\nexport const setErrorMessageNetworkAC = (errorNetwork: Nullable<string>) =>\r\n  ({ type: 'FORGOT_PASSWORD/SET_NETWORK_ERROR_MESSAGE', errorNetwork } as const);\r\n\r\ntype SetErrorMessagePassType = ReturnType<typeof setErrorMessagePassAC>;\r\nexport type SetErrorMessageNetworkType = ReturnType<typeof setErrorMessageNetworkAC>;\r\n\r\ntype ActionTypes = SetErrorMessagePassType | SetErrorMessageNetworkType;\r\n","export type ProfileResponseDataType = null | {\r\n  _id: string;\r\n  email: string;\r\n  name: string;\r\n  avatar?: string;\r\n  publicCardPacksCount: number;\r\n  /* created: Date;\r\n  updated: Date; */\r\n  isAdmin: boolean;\r\n  rememberMe: boolean;\r\n  error?: string;\r\n};\r\n\r\nconst initialState = {\r\n  _id: '',\r\n  avatar: '',\r\n  name: '',\r\n  email: '',\r\n  publicCardPacksCount: 0,\r\n  /* created: '',\r\n  updated: '', */\r\n  isAdmin: false,\r\n  rememberMe: false,\r\n  error: '',\r\n};\r\n\r\nexport type InitialStateProfileType = typeof initialState;\r\n\r\nexport const profileReducer = (\r\n  state: InitialStateProfileType = initialState,\r\n  action: ActionProfileTypes,\r\n): InitialStateProfileType => {\r\n  switch (action.type) {\r\n    /* case 'SET_USER_DATA':\r\n      return {\r\n        ...state,\r\n        ...action.payload,\r\n      }; */\r\n    case 'PROFILE/SET_USER_PROFILE':\r\n      return {\r\n        ...state,\r\n        ...action.profile,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n/* export const setUserData = (_id: string, name: string, avatar: string) =>\r\n  ({\r\n    type: 'SET_USER_DATA',\r\n    payload: { _id, name, avatar },\r\n  } as const); */\r\nexport const setUserProfileAC = (profile: ProfileResponseDataType) =>\r\n  ({\r\n    type: 'PROFILE/SET_USER_PROFILE',\r\n    profile,\r\n  } as const);\r\n/* export const setErrorMessage = (error: Nullable<string>) =>\r\n  ({ type: 'SET_ERROR_MESSAGE', error } as const); */\r\n\r\nexport const setUserDataAC = (user: ProfileResponseDataType) =>\r\n  ({ type: 'PROFILE/SET_USER_DATA', user } as const);\r\n\r\n// types\r\nexport type setUserProfileType = ReturnType<typeof setUserProfileAC>;\r\n/* type setAuthUserDataType = ReturnType<typeof setUserData>; */\r\n/* type setErrorMessageLoginType = ReturnType<typeof setErrorMessage>; */\r\ntype ActionProfileTypes = setUserProfileType;\r\n/*  | setAuthUserDataType */\r\n/* setErrorMessageLoginType | */\r\n","import { AxiosResponse } from 'axios';\r\n\r\nimport { Nullable } from '../types';\r\n\r\nimport { instance } from './apiConfig';\r\n\r\nexport const authAPI = {\r\n  login(params: LoginParamsType) {\r\n    return instance.post<LoginParamsType, AxiosResponse<ResponseType>>(\r\n      'auth/login',\r\n      params,\r\n    );\r\n  },\r\n  logOut() {\r\n    return instance.delete<ResponseType>('auth/me', {});\r\n  },\r\n  me() {\r\n    return instance.post<ResponseType>('auth/me', {});\r\n  },\r\n  register(params: RegisterParamsType) {\r\n    return instance.post<RegisterParamsType, any>('auth/register', params);\r\n  },\r\n};\r\n\r\nexport const profileAPI = {\r\n  updateProfile(paramsUpdate: UpdateProfileType) {\r\n    return instance.put('/auth/me', paramsUpdate);\r\n  },\r\n};\r\n\r\n// types\r\nexport type UpdateProfileType = {\r\n  name: string;\r\n  avatar: Nullable<string>;\r\n};\r\nexport type LoginParamsType = {\r\n  email: string;\r\n  password: string;\r\n  rememberMe: boolean;\r\n};\r\nexport type RegisterParamsType = {\r\n  email: string;\r\n  password: string;\r\n};\r\n\r\nexport type ResponseType = {\r\n  _id: string;\r\n  email: string;\r\n  name: string;\r\n  avatar?: string;\r\n  publicCardPacksCount: number;\r\n  created: Date;\r\n  updated: Date;\r\n  isAdmin: boolean;\r\n  verified: boolean;\r\n  rememberMe: boolean;\r\n  error?: string;\r\n};\r\n","import { ThunkDispatch } from 'redux-thunk';\r\n\r\nimport { setAppStatusAC, SetAppStatusActionType } from './appInitialized';\r\nimport { setErrorMessageNetworkAC, SetErrorMessageNetworkType } from './errorReducer';\r\nimport { setUserProfileAC, setUserProfileType } from './profile';\r\n\r\nimport { authAPI, LoginParamsType } from 'api/loginApi';\r\nimport { requestStatus } from 'enum';\r\nimport { RootStoreType } from 'store';\r\nimport { Nullable } from 'types';\r\n\r\nexport type InitialStateDataType = {\r\n  isAuth: boolean;\r\n  error?: Nullable<string>;\r\n};\r\n\r\nexport const initialState: InitialStateDataType = {\r\n  isAuth: false,\r\n  error: null,\r\n};\r\n\r\nexport const loginReducer = (\r\n  state: InitialStateDataType = initialState,\r\n  action: ActionTypesLogin,\r\n): InitialStateDataType => {\r\n  switch (action.type) {\r\n    case 'LOGIN/SET_AUTH_LOGIN_DATA':\r\n      return {\r\n        ...state,\r\n        isAuth: action.isAuth,\r\n      };\r\n    case 'LOGIN/SET_ERROR_MESSAGE':\r\n      return {\r\n        ...state,\r\n        error: action.error,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const setAuthLoginDataAC = (isAuth: boolean) =>\r\n  ({ type: 'LOGIN/SET_AUTH_LOGIN_DATA', isAuth } as const);\r\n\r\nexport const setErrorMessageAC = (error: Nullable<string>) =>\r\n  ({ type: 'LOGIN/SET_ERROR_MESSAGE', error } as const);\r\n\r\nexport const logInTC =\r\n  (data: LoginParamsType) =>\r\n  (dispatch: ThunkDispatch<RootStoreType, undefined, ActionTypesLogin>) => {\r\n    dispatch(setAppStatusAC(requestStatus.loading));\r\n    authAPI\r\n      .login(data)\r\n      .then(res => {\r\n        dispatch(setAuthLoginDataAC(true));\r\n        dispatch(setUserProfileAC(res.data));\r\n        dispatch(setAppStatusAC(requestStatus.succeeded));\r\n      })\r\n      .catch(e => {\r\n        const errorNetwork = e.response\r\n          ? e.response.data.error\r\n          : `${e.message}, more details in the console`;\r\n        dispatch(setErrorMessageNetworkAC(errorNetwork));\r\n        const timeOut = 3000;\r\n        setTimeout(() => {\r\n          dispatch(setErrorMessageNetworkAC(''));\r\n        }, timeOut);\r\n      })\r\n      .finally(() => {\r\n        dispatch(setAppStatusAC(requestStatus.succeeded));\r\n      });\r\n  };\r\n\r\nexport const logOutTC =\r\n  () => (dispatch: ThunkDispatch<RootStoreType, undefined, ActionTypesLogin>) => {\r\n    dispatch(setAppStatusAC(requestStatus.loading));\r\n    authAPI.logOut().then(() => {\r\n      dispatch(setAuthLoginDataAC(false));\r\n      dispatch(setUserProfileAC(null));\r\n      dispatch(setErrorMessageAC(''));\r\n      dispatch(setAppStatusAC(requestStatus.succeeded));\r\n    });\r\n  };\r\n\r\n// type;\r\nexport type setLoginData = ReturnType<typeof setAuthLoginDataAC>;\r\ntype setErrorMessageLogin = ReturnType<typeof setErrorMessageAC>;\r\nexport type ActionTypesLogin =\r\n  | setLoginData\r\n  | setErrorMessageLogin\r\n  | SetAppStatusActionType\r\n  | setUserProfileType\r\n  | SetErrorMessageNetworkType;\r\n","import { ThunkDispatch } from 'redux-thunk';\r\n\r\nimport { setAuthLoginDataAC, setLoginData } from './login';\r\nimport { setUserProfileAC, setUserProfileType } from './profile';\r\n\r\nimport { authAPI } from 'api/loginApi';\r\nimport { requestStatus } from 'enum';\r\nimport { RootStoreType } from 'store';\r\nimport { Nullable, RequestStatusType } from 'types';\r\n\r\nexport const initialState: InitialStateType = {\r\n  status: requestStatus.idle,\r\n  error: null,\r\n  isInitialized: false,\r\n};\r\n\r\nexport const appReducer = (\r\n  state: InitialStateType = initialState,\r\n  action: ActionTypes,\r\n): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'APP/SET_STATUS':\r\n      return { ...state, status: action.status };\r\n    case 'APP/SET_ERROR':\r\n      return { ...state, error: action.error };\r\n    case 'APP/SET_IS_INITIALIZED':\r\n      return { ...state, isInitialized: action.isInitialized };\r\n    default:\r\n      return { ...state };\r\n  }\r\n};\r\n\r\nexport const setAppErrorAC = (error: Nullable<string>) =>\r\n  ({ type: 'APP/SET_ERROR', error } as const);\r\nexport const setAppStatusAC = (status: RequestStatusType) =>\r\n  ({ type: 'APP/SET_STATUS', status } as const);\r\n\r\nexport const setIsInitializedAC = (isInitialized: boolean) =>\r\n  ({ type: 'APP/SET_IS_INITIALIZED', isInitialized } as const);\r\n\r\nexport const initializeAppTC =\r\n  () => (dispatch: ThunkDispatch<RootStoreType, undefined, ActionTypes>) => {\r\n    authAPI\r\n      .me()\r\n      .then(res => {\r\n        dispatch(setAuthLoginDataAC(true));\r\n        dispatch(setUserProfileAC(res.data));\r\n      })\r\n      .finally(() => {\r\n        dispatch(setIsInitializedAC(true));\r\n      });\r\n  };\r\n\r\n// types\r\n\r\nexport type InitialStateType = {\r\n  // происходит ли сейчас взаимодействие с сервером\r\n  status: RequestStatusType;\r\n  // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n  error: Nullable<string>;\r\n  isInitialized: boolean;\r\n};\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>;\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>;\r\nexport type setIsInitializedType = ReturnType<typeof setIsInitializedAC>;\r\n\r\ntype ActionTypes =\r\n  | SetAppErrorActionType\r\n  | SetAppStatusActionType\r\n  | setIsInitializedType\r\n  | setLoginData\r\n  | setUserProfileType;\r\n","import { AxiosError } from 'axios';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\n\r\nimport { AddCardType, cardsAPI, cardType, ResponseType } from '../../api/cardsApi';\r\nimport { requestStatus } from '../../enum';\r\nimport { RootStoreType } from '../store';\r\n\r\nimport { setAppStatusAC, SetAppStatusActionType } from './appInitialized';\r\nimport { setErrorMessageNetworkAC, SetErrorMessageNetworkType } from './errorReducer';\r\n\r\ntype initStateType = {\r\n  cards: cardType[];\r\n  answer: string;\r\n  question: string;\r\n  cardsTotalCount: number;\r\n  grade: number;\r\n  shots: number;\r\n  maxGrade: number;\r\n  minGrade: number;\r\n  page: number;\r\n  pageCount: number;\r\n  packUserId: string;\r\n};\r\nconst initialState: initStateType = {\r\n  cards: [],\r\n  answer: '',\r\n  question: '',\r\n  cardsTotalCount: 0,\r\n  grade: 5,\r\n  shots: 1,\r\n  maxGrade: 6,\r\n  minGrade: 0,\r\n  page: 1,\r\n  pageCount: 10,\r\n  packUserId: '',\r\n};\r\nexport const cardReducer = (\r\n  state: initStateType = initialState,\r\n  action: ActionTypesCards,\r\n): initStateType => {\r\n  switch (action.type) {\r\n    case 'CARDS/SET_DATA_CARDS':\r\n      return { ...state, ...action.data };\r\n    case 'CARDS/REMOVE_CARD':\r\n      return { ...state, cards: state.cards.filter(c => c._id !== action._id) };\r\n    case 'CARDS/ADD_CARD':\r\n      return { ...state, cards: [action.card, ...state.cards] };\r\n    case 'CARDS/UPDATE_CARD':\r\n      return {\r\n        ...state,\r\n        cards: state.cards.map(c =>\r\n          c._id === action._id\r\n            ? {\r\n                ...c,\r\n                question: action.question,\r\n                answer: action.answer,\r\n              }\r\n            : c,\r\n        ),\r\n      };\r\n    case 'CARDS/SET_CURRENT_PAGE':\r\n      return {\r\n        ...state,\r\n        page: action.pageNumber,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const setCardsAC = (data: ResponseType) =>\r\n  ({ type: 'CARDS/SET_DATA_CARDS', data } as const);\r\n\r\nexport const removeCardAC = (_id: string) =>\r\n  ({ type: 'CARDS/REMOVE_CARD', _id } as const);\r\n\r\nexport const addCardAC = (card: cardType) => ({ type: 'CARDS/ADD_CARD', card } as const);\r\n\r\nexport const updateCardAC = (_id: string, question: string, answer: string) =>\r\n  ({\r\n    type: 'CARDS/UPDATE_CARD',\r\n    _id,\r\n    question,\r\n    answer,\r\n  } as const);\r\nexport const setCurrentPageCardsAC = (pageNumber: number) =>\r\n  ({\r\n    type: 'CARDS/SET_CURRENT_PAGE',\r\n    pageNumber,\r\n  } as const);\r\n\r\nexport const getCardsTC =\r\n  (cardsPackId: string) =>\r\n  (dispatch: ThunkDispatch<RootStoreType, undefined, ActionTypesCards>) => {\r\n    dispatch(setAppStatusAC(requestStatus.loading));\r\n    cardsAPI\r\n      .getCards(cardsPackId)\r\n      .then(res => {\r\n        dispatch(setCardsAC(res.data));\r\n        dispatch(setAppStatusAC(requestStatus.succeeded));\r\n      })\r\n      .catch(e => {\r\n        const errorNetwork = e.response\r\n          ? e.response.data.error\r\n          : `${e.message}, more details in the console`;\r\n        dispatch(setErrorMessageNetworkAC(errorNetwork));\r\n        const timeOut = 3000;\r\n        setTimeout(() => {\r\n          dispatch(setErrorMessageNetworkAC(''));\r\n        }, timeOut);\r\n      })\r\n      .finally(() => {\r\n        dispatch(setAppStatusAC(requestStatus.succeeded));\r\n      });\r\n  };\r\n\r\nexport const removeCardTC =\r\n  (_id: string) =>\r\n  (dispatch: ThunkDispatch<RootStoreType, undefined, ActionTypesCards>) => {\r\n    dispatch(setAppStatusAC(requestStatus.loading));\r\n    cardsAPI\r\n      .deleteCard(_id)\r\n      .then(() => {\r\n        dispatch(removeCardAC(_id));\r\n        dispatch(setAppStatusAC(requestStatus.succeeded));\r\n      })\r\n      .catch(e => {\r\n        const errorNetwork = e.response\r\n          ? e.response.data.error\r\n          : `${e.message}, more details in the console`;\r\n        dispatch(setErrorMessageNetworkAC(errorNetwork));\r\n      });\r\n  };\r\n\r\n/* export const addCardTC =\r\n  (cardsPackId: string) =>\r\n  (dispatch: ThunkDispatch<RootStoreType, undefined, ActionTypesCards>) => {\r\n    dispatch(setAppStatusAC(requestStatus.loading));\r\n    cardsAPI.getCards(cardsPackId).then(res => {\r\n      dispatch(setCardsAC(res.data));\r\n      dispatch(setAppStatusAC(requestStatus.succeeded));\r\n    });\r\n  }; */\r\nexport const addCardTC =\r\n  (payload: AddCardType) =>\r\n  (dispatch: ThunkDispatch<RootStoreType, undefined, ActionTypesCards>) => {\r\n    dispatch(setAppStatusAC(requestStatus.loading));\r\n    cardsAPI\r\n      .addNewCard(payload)\r\n      .then(res => {\r\n        const { newCard } = res.data;\r\n        dispatch(addCardAC(newCard));\r\n        dispatch(setAppStatusAC(requestStatus.succeeded));\r\n      })\r\n      .catch((e: AxiosError) => {\r\n        const errorNetwork = e.response\r\n          ? e.response.data.error\r\n          : `${e.message}, more details in the console`;\r\n        dispatch(setErrorMessageNetworkAC(errorNetwork));\r\n        const timeOut = 2000;\r\n        setTimeout(() => {\r\n          dispatch(setErrorMessageNetworkAC(''));\r\n        }, timeOut);\r\n      })\r\n      .finally(() => {\r\n        dispatch(setAppStatusAC(requestStatus.succeeded));\r\n      });\r\n  };\r\n\r\nexport const updateCardTC =\r\n  (_id: string, question: string, answer: string, cardsPackId: string) =>\r\n  (dispatch: ThunkDispatch<RootStoreType, undefined, ActionTypesCards>) => {\r\n    dispatch(setAppStatusAC(requestStatus.loading));\r\n    cardsAPI.updateCard({ _id, cardsPackId }).then(() => {\r\n      dispatch(updateCardAC(_id, question, answer));\r\n      dispatch(setAppStatusAC(requestStatus.succeeded));\r\n    });\r\n  };\r\n\r\n// types\r\nexport type getCardsType = ReturnType<typeof setCardsAC>;\r\nexport type removeCardType = ReturnType<typeof removeCardAC>;\r\nexport type addCardType = ReturnType<typeof addCardAC>;\r\nexport type updateCardType = ReturnType<typeof updateCardAC>;\r\nexport type setCurrentPageCard = ReturnType<typeof setCurrentPageCardsAC>;\r\n\r\nexport type ActionTypesCards =\r\n  | getCardsType\r\n  | SetAppStatusActionType\r\n  | removeCardType\r\n  | SetErrorMessageNetworkType\r\n  | addCardType\r\n  | updateCardType\r\n  | setCurrentPageCard;\r\n","import { AxiosResponse } from 'axios';\r\n\r\nimport { Nullable } from '../types';\r\n\r\nimport { instance } from './apiConfig';\r\n\r\nexport type AddNewPassType = {\r\n  email: Nullable<string>;\r\n  from?: Nullable<string>;\r\n  message?: Nullable<string>;\r\n};\r\n\r\nexport type SetNewPassType = {\r\n  password: Nullable<string>;\r\n  resetPasswordToken?: Nullable<string>;\r\n};\r\n\r\nexport type AddNewPassResponseType = {\r\n  info: Nullable<string>;\r\n  error: Nullable<string>;\r\n};\r\n\r\nexport const addNewPassAPI = {\r\n  addNewPass(params: AddNewPassType) {\r\n    return instance.post<AddNewPassType, AxiosResponse<AddNewPassResponseType>>(\r\n      'auth/forgot',\r\n      params,\r\n    );\r\n  },\r\n  setNewPass(params: SetNewPassType) {\r\n    return instance.post<SetNewPassType, AxiosResponse<AddNewPassResponseType>>(\r\n      'auth/set-new-password',\r\n      params,\r\n    );\r\n  },\r\n};\r\n","import { ThunkDispatch } from 'redux-thunk';\r\n\r\nimport { RootStoreType } from '../store';\r\n\r\nimport { setAppStatusAC, SetAppStatusActionType } from './appInitialized';\r\nimport { setErrorMessageNetworkAC, SetErrorMessageNetworkType } from './errorReducer';\r\n\r\nimport { authAPI, RegisterParamsType } from 'api';\r\nimport { REGISTRATION, requestStatus } from 'enum';\r\n\r\nconst initialState = {\r\n  isSignUp: false,\r\n};\r\ntype InitialStateType = typeof initialState;\r\n\r\nexport const signUpReducer = (\r\n  state = initialState,\r\n  action: SignUpActionTypes,\r\n): InitialStateType => {\r\n  switch (action.type) {\r\n    case REGISTRATION.IsSuccessful: {\r\n      return {\r\n        ...state,\r\n        isSignUp: action.isSignUpSuccessful,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const toggleIsSignUpAC = (isSignUpSuccessful: boolean) =>\r\n  ({\r\n    type: REGISTRATION.IsSuccessful,\r\n    isSignUpSuccessful,\r\n  } as const);\r\n/*\r\nexport const setErrorAC = (error: null | string) =>\r\n  ({ type: 'RECOVERY/ERROR', payload: { error } } as const);\r\n*/\r\n\r\nexport const signUpTC =\r\n  (params: RegisterParamsType) =>\r\n  (dispatch: ThunkDispatch<RootStoreType, undefined, SignUpActionTypes>) => {\r\n    dispatch(setAppStatusAC(requestStatus.loading));\r\n    authAPI\r\n      .register(params)\r\n      .then(() => {\r\n        dispatch(toggleIsSignUpAC(true));\r\n        dispatch(setAppStatusAC(requestStatus.succeeded));\r\n      })\r\n      .catch(e => {\r\n        dispatch(setAppStatusAC(requestStatus.succeeded));\r\n        const errorNetwork = e.response\r\n          ? e.response.data.error\r\n          : `${e.message}, more details in the console`;\r\n        dispatch(setErrorMessageNetworkAC(errorNetwork));\r\n        const timeOut = 2000;\r\n        setTimeout(() => {\r\n          dispatch(setErrorMessageNetworkAC(''));\r\n        }, timeOut);\r\n      })\r\n      .finally(() => {\r\n        dispatch(setAppStatusAC(requestStatus.succeeded));\r\n      });\r\n  };\r\n/*\r\nexport type SetErrorType = ReturnType<typeof setErrorAC>;\r\n*/\r\ntype setSignUpType = ReturnType<typeof toggleIsSignUpAC>;\r\nexport type SignUpActionTypes =\r\n  | setSignUpType\r\n  | SetErrorMessageNetworkType\r\n  | SetAppStatusActionType;\r\n","import { RootStateType } from '../../types';\r\n\r\nexport const getIsDataLoaded = (state: RootStateType): boolean => state.login.isAuth;\r\nexport const getErrorMessage = (state: RootStateType): any => state.login.error;\r\n","import { RootStateType } from '../../types';\r\n\r\nexport const getIsInitialized = (state: RootStateType): boolean =>\r\n  state.app.isInitialized;\r\nexport const getStatus = (state: RootStateType): string => state.app.status;\r\n","import { RootStateType } from '../../types';\r\n\r\nimport { Nullable } from 'types';\r\n\r\nexport const getErrorNetworkMessage = (\r\n  state: RootStateType,\r\n): Nullable<string> | undefined => state.errorMessage.errorNetwork;\r\nexport const getErrorValidMessage = (\r\n  state: RootStateType,\r\n): Nullable<string> | undefined => state.errorMessage.errorValidation;\r\n","import { RootStateType } from '../../types';\r\n\r\nexport const getIsSignUp = (state: RootStateType): boolean => state.signUp.isSignUp;\r\n","import React, { ChangeEvent, useState } from 'react';\r\n\r\nimport { CircularProgress } from '@material-ui/core';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Link, Navigate } from 'react-router-dom';\r\n\r\nimport styleLogin from '../../style/Login.module.css';\r\nimport { CustomInput } from '../customInput';\r\n\r\nimport { CustomButton } from 'components';\r\nimport { PATH, requestStatus } from 'enum';\r\nimport { useAppSelector, useInput } from 'hooks';\r\nimport {\r\n  getErrorNetworkMessage,\r\n  getErrorValidMessage,\r\n  logInTC,\r\n  setErrorMessagePassAC,\r\n} from 'store';\r\nimport { getIsDataLoaded, getStatus } from 'store/selectors';\r\nimport style from 'style/Common.module.css';\r\nimport { ReturnComponentType } from 'types';\r\nimport { isEmailValid, isPasswordValid } from 'utils';\r\n\r\nexport const Login = (): ReturnComponentType => {\r\n  const [rememberMe, handleRememberMe] = useState<boolean>(false);\r\n  const { value: email, handleValue: handleEmail, resetValue: resetEmail } = useInput('');\r\n  const {\r\n    value: password,\r\n    handleValue: handlePassword,\r\n    resetValue: resetPassword,\r\n  } = useInput('');\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const isDataLoaded = useAppSelector(getIsDataLoaded);\r\n  const isLoading = useAppSelector(getStatus);\r\n  const errorPassMessage = useAppSelector(getErrorValidMessage);\r\n  const errorNetworkMessage = useAppSelector(getErrorNetworkMessage);\r\n\r\n  const onChangeCheckBox = (e: ChangeEvent<HTMLInputElement>): void =>\r\n    handleRememberMe(e.currentTarget.checked);\r\n  const timeOut = 2000;\r\n\r\n  const onClickHandleLogin = (): void => {\r\n    if (!isPasswordValid(password) || !isEmailValid(email)) {\r\n      dispatch(setErrorMessagePassAC('invalid data ;-('));\r\n      setTimeout(() => {\r\n        dispatch(setErrorMessagePassAC(''));\r\n      }, timeOut);\r\n      return;\r\n    }\r\n    if (isPasswordValid(password) && isEmailValid(email)) {\r\n      dispatch(logInTC({ email, password, rememberMe }));\r\n      resetEmail('');\r\n      resetPassword('');\r\n    }\r\n  };\r\n  if (isDataLoaded) {\r\n    return <Navigate to={PATH.PROFILE} />;\r\n  }\r\n\r\n  return (\r\n    <div className={style.mainContainer}>\r\n      {isLoading === requestStatus.loading ? (\r\n        <CircularProgress />\r\n      ) : (\r\n        <div className={style.content}>\r\n          <h2> Login </h2>\r\n          {errorPassMessage && <span style={{ color: 'red' }}> {errorPassMessage} </span>}\r\n          {errorNetworkMessage && (\r\n            <span style={{ color: 'red' }}> {errorNetworkMessage} </span>\r\n          )}\r\n          <CustomInput\r\n            onChange={handleEmail}\r\n            value={email}\r\n            placeholder=\"Email\"\r\n            typeInput=\"text\"\r\n          />\r\n          <CustomInput\r\n            placeholder=\"password\"\r\n            typeInput=\"password\"\r\n            value={password}\r\n            onChange={handlePassword}\r\n          />\r\n          <div className={styleLogin.rememberMeInput}>\r\n            remember me\r\n            <input type=\"checkbox\" checked={rememberMe} onChange={onChangeCheckBox} />\r\n          </div>\r\n          <div>\r\n            <Link to={PATH.CONFIRM_PASSWORD}> Forgot password </Link>\r\n          </div>\r\n          <div style={{ minWidth: '50px' }}>\r\n            <CustomButton\r\n              title=\"Sign In\"\r\n              onClick={onClickHandleLogin}\r\n              disabled={isLoading === requestStatus.loading}\r\n            />\r\n          </div>\r\n          <p> Do not have an account? </p>\r\n          <Link to={PATH.REGISTRATION}> Sign Up </Link>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","export default __webpack_public_path__ + \"static/media/avatar.4f216192.png\";","import React, { ChangeEvent, useState } from 'react';\r\n\r\nimport { CircularProgress } from '@material-ui/core';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Link, Navigate } from 'react-router-dom';\r\n\r\nimport noneAvatarImage from '../../assets/avatar.png';\r\nimport { InitialStateProfileType, setUserDataAC } from '../../store/reducers/profile';\r\n\r\nimport { profileAPI } from 'api/loginApi';\r\nimport { PATH } from 'enum/pathes';\r\nimport { useAppSelector } from 'hooks/useAppSelector';\r\nimport { getIsDataLoaded, RootStoreType } from 'store';\r\nimport { getStatus } from 'store/selectors/app/appSelectors';\r\nimport style from 'style/Common.module.css';\r\nimport { ReturnComponentType } from 'types';\r\n\r\nexport const Profile = (): ReturnComponentType => {\r\n  const userData = useSelector<RootStoreType, InitialStateProfileType>(\r\n    state => state.profilePage,\r\n  );\r\n  const isAuth = useAppSelector(getIsDataLoaded);\r\n  const isLoading = useAppSelector(getStatus);\r\n  const { avatar, email } = userData;\r\n\r\n  const [name, setName] = useState(userData.name);\r\n  const [editMode, setEditMode] = useState<boolean>(false);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const data = {\r\n    avatar:\r\n      'https://tlgrm.ru/_/stickers/837/98f/83798fe7-d57e-300a-93fa-561e3027691e/2.jpg',\r\n    name,\r\n  };\r\n\r\n  const onChangeHandlerName = (event: ChangeEvent<HTMLInputElement>): void => {\r\n    setName(event.currentTarget.value);\r\n  };\r\n\r\n  const activateEditForm = (): void => setEditMode(true);\r\n\r\n  const hideEditForm = (): void => {\r\n    profileAPI.updateProfile(data).then(res => {\r\n      dispatch(setUserDataAC(res.data.updatedUser));\r\n    });\r\n    setEditMode(false);\r\n  };\r\n  /*  const onPhotoSelected = (event: ChangeEvent<HTMLInputElement>): void => {\r\n      if (event.target.files) {\r\n        // eslint-disable-next-line @typescript-eslint/no-magic-numbers\r\n        // updateProfileTC(event.target.files[0]);\r\n      }\r\n    }; */\r\n\r\n  if (!isAuth) {\r\n    return <Navigate to={PATH.LOGIN} />;\r\n  }\r\n\r\n  return (\r\n    <div className={style.mainContainer}>\r\n      {isLoading === 'loading' ? (\r\n        <CircularProgress />\r\n      ) : (\r\n        <div className={style.content}>\r\n          <h2> Profile </h2>\r\n          <img\r\n            alt=\"avatar_image\"\r\n            className={style.avatar}\r\n            src={avatar !== null ? avatar : noneAvatarImage}\r\n          />\r\n          <input type=\"file\" className={style.avatar} />\r\n          {editMode ? (\r\n            <input\r\n              className={style.inputName}\r\n              name=\"name\"\r\n              value={name}\r\n              onChange={onChangeHandlerName}\r\n              onBlur={hideEditForm}\r\n            />\r\n          ) : (\r\n            <div style={{ display: 'flex' }}>\r\n              <span style={{ cursor: 'pointer' }} onDoubleClick={activateEditForm}>\r\n                Name: {name}\r\n              </span>\r\n            </div>\r\n          )}\r\n          <p> Email: {email} </p>\r\n          <Link style={{ textDecoration: 'none', cursor: 'pointer' }} to={PATH.PACKS}>\r\n            add packs\r\n          </Link>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { Link, Navigate } from 'react-router-dom';\r\n\r\nimport { RegisterParamsType } from '../../api';\r\nimport styleRegister from '../../style/Registrations.module.css';\r\n\r\nimport { CustomButton, CustomInput } from 'components';\r\nimport { PATH, requestStatus } from 'enum';\r\nimport { useAppSelector, useInput } from 'hooks';\r\nimport {\r\n  signUpTC,\r\n  getErrorNetworkMessage,\r\n  getErrorValidMessage,\r\n  getStatus,\r\n  setErrorMessagePassAC,\r\n} from 'store';\r\nimport { getIsSignUp } from 'store/selectors';\r\nimport style from 'style/Common.module.css';\r\nimport { ReturnComponentType } from 'types/ReturnComponentType';\r\nimport { isEmailValid, isPasswordValid } from 'utils';\r\n\r\nexport const SignUp = (): ReturnComponentType => {\r\n  const { value: email, handleValue: handleEmail, resetValue: resetEmail } = useInput('');\r\n  const {\r\n    value: password,\r\n    handleValue: handlePassword,\r\n    resetValue: resetPassword,\r\n  } = useInput('');\r\n  const {\r\n    value: confirmPassword,\r\n    handleValue: handleConfirmPassword,\r\n    resetValue: resetConfirmPassword,\r\n  } = useInput('');\r\n\r\n  const isLoading = useAppSelector(getStatus);\r\n  const isSignUp = useAppSelector(getIsSignUp);\r\n  const errorPassMessage = useAppSelector(getErrorValidMessage);\r\n  const errorNetworkMessage = useAppSelector(getErrorNetworkMessage);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const data: RegisterParamsType = {\r\n    email,\r\n    password,\r\n  };\r\n  const timeOut = 1000;\r\n\r\n  const onCancelButtonClick = (): void => {\r\n    resetEmail('');\r\n    resetPassword('');\r\n    resetConfirmPassword('');\r\n  };\r\n\r\n  const onSendButtonClick = (): void => {\r\n    if (\r\n      password !== confirmPassword ||\r\n      password === null ||\r\n      confirmPassword === null ||\r\n      !isPasswordValid(password) ||\r\n      !isEmailValid(email)\r\n    ) {\r\n      dispatch(setErrorMessagePassAC('invalid data ;-('));\r\n      setTimeout(() => {\r\n        dispatch(setErrorMessagePassAC(''));\r\n      }, timeOut);\r\n    }\r\n    if (isPasswordValid(password) && isEmailValid(email)) {\r\n      dispatch(signUpTC(data));\r\n      resetPassword('');\r\n      resetEmail('');\r\n      resetConfirmPassword('');\r\n    }\r\n  };\r\n  if (isSignUp) {\r\n    return <Navigate to={PATH.LOGIN} />;\r\n  }\r\n  return (\r\n    <div className={style.mainContainer}>\r\n      <div className={style.content}>\r\n        <h2>Registration</h2>\r\n        <div>\r\n          <span style={{ color: 'red' }}> {errorPassMessage} </span>\r\n          <span style={{ color: 'red' }}> {errorNetworkMessage} </span>\r\n        </div>\r\n        <CustomInput\r\n          placeholder=\"Email\"\r\n          typeInput=\"text\"\r\n          onChange={handleEmail}\r\n          value={email}\r\n        />\r\n        <CustomInput\r\n          placeholder=\"Password\"\r\n          typeInput=\"password\"\r\n          onChange={handlePassword}\r\n          value={password}\r\n        />\r\n        <CustomInput\r\n          placeholder=\"Confirm Password\"\r\n          typeInput=\"password\"\r\n          onChange={handleConfirmPassword}\r\n          value={confirmPassword}\r\n        />\r\n        <p>\r\n          {' '}\r\n          Have fun! <Link to={PATH.LOGIN}> Try loggin in </Link>{' '}\r\n        </p>\r\n        <div className={styleRegister.btns}>\r\n          <CustomButton title=\"Cancel\" onClick={onCancelButtonClick} />\r\n          <CustomButton\r\n            title=\"Create\"\r\n            onClick={onSendButtonClick}\r\n            disabled={isLoading === requestStatus.loading}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { PATH } from 'enum';\r\n\r\nexport const appNavigation: appNavigationType = [\r\n  { id: 1, title: 'registration', link: PATH.REGISTRATION },\r\n  { id: 2, title: 'login', link: PATH.LOGIN },\r\n  { id: 3, title: 'profile', link: PATH.PROFILE },\r\n  { id: 4, title: 'confirmPassword', link: PATH.CONFIRM_PASSWORD },\r\n  { id: 5, title: 'popup', link: PATH.POPUP },\r\n  { id: 6, title: 'createNewPassword', link: PATH.CREATE_NEW_PASSWORD },\r\n  { id: 7, title: 'cards', link: PATH.CARDS },\r\n  { id: 8, title: 'page404', link: PATH.PAGE_404 },\r\n];\r\n\r\ntype appNavigationType = { id: number; title: string; link: string }[];\r\n","export default __webpack_public_path__ + \"static/media/preloader1.9c1d25d2.gif\";","import React from 'react';\r\n\r\nimport stylePreloader from '../../style/Preloader.module.css';\r\nimport { ReturnComponentType } from '../../types';\r\n\r\nimport preloader1 from 'assets/preloader1.gif';\r\n\r\nexport const Preloader = (): ReturnComponentType => (\r\n  <div>\r\n    <img className={stylePreloader.loader} src={preloader1} alt=\"preloader\" />\r\n  </div>\r\n);\r\n","import { AxiosResponse } from 'axios';\r\n\r\nimport { ResponseDeckType } from './decksTC';\r\n\r\nimport { instance } from 'api/apiConfig';\r\n\r\nexport type addNewDeckType = {\r\n  name?: string;\r\n};\r\n\r\nexport type updateDeckType = {\r\n  _id: string;\r\n};\r\n\r\nexport type dataRequestType = {\r\n  page?: number;\r\n  pageCount?: number;\r\n  min?: number;\r\n  max?: number;\r\n  sortPacks?: string;\r\n  user_id?: string;\r\n  packName?: string;\r\n};\r\n\r\nexport const decksAPI = {\r\n  fetchDecks(page: number, pageCount: number) {\r\n    return instance.get<any, AxiosResponse<ResponseDeckType>>('cards/pack', {\r\n      params: { page, pageCount },\r\n    });\r\n  },\r\n\r\n  getPacks(data: dataRequestType) {\r\n    return instance.get<any, AxiosResponse<any>>('cards/pack', { params: { ...data } });\r\n  },\r\n\r\n  addNewDeck(cardsPack: addNewDeckType) {\r\n    return instance.post<addNewDeckType, AxiosResponse<any>>('cards/pack', { cardsPack });\r\n  },\r\n\r\n  removeDeck(id: string) {\r\n    return instance.delete<string, any>(`cards/pack/?id=${id}`);\r\n  },\r\n\r\n  updateDeck(cardsPack: updateDeckType) {\r\n    return instance.put<string, any>('cards/pack', { cardsPack });\r\n  },\r\n};\r\n","/* eslint-disable @typescript-eslint/no-magic-numbers */\r\n/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\r\n/* eslint-disable jsx-a11y/click-events-have-key-events */\r\n/* eslint-disable react/jsx-key */\r\nimport React from 'react';\r\n\r\nimport './pagination.scss';\r\n\r\nimport { DOTS, usePagination } from 'hooks';\r\nimport { ReturnComponentType } from 'types';\r\n\r\ntype PaginationPropsType = {\r\n  currentPage: number;\r\n  onPageChange: (page: number) => void;\r\n  totalCount: number;\r\n  siblingCount?: number;\r\n  pageSize: number;\r\n};\r\n\r\nexport const Pagination = (props: PaginationPropsType): ReturnComponentType => {\r\n  const { onPageChange, totalCount, siblingCount = 1, currentPage, pageSize } = props;\r\n\r\n  const paginationRange = usePagination({\r\n    currentPage,\r\n    totalCount,\r\n    siblingCount,\r\n    pageSize,\r\n  });\r\n\r\n  if (currentPage === 0 || paginationRange.length < 2) {\r\n    return null;\r\n  }\r\n\r\n  const onNext = (): void => {\r\n    onPageChange(currentPage + 1);\r\n  };\r\n\r\n  const onPrevious = (): void => {\r\n    onPageChange(currentPage - 1);\r\n  };\r\n  const lastPage = paginationRange[paginationRange.length - 1];\r\n  const ulClassName = currentPage === 1 ? 'pagination-item disabled' : 'pagination-item';\r\n\r\n  return (\r\n    <ul className=\"pagination-container\">\r\n      {/* eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions */}\r\n      <li className={ulClassName} onClick={onPrevious}>\r\n        <div className=\"arrow left\" />\r\n      </li>\r\n      {paginationRange.map((pageNumber: string | number) => {\r\n        const listItemClassName =\r\n          pageNumber === currentPage ? 'pagination-item selected' : 'pagination-item';\r\n\r\n        if (pageNumber === DOTS) {\r\n          return (\r\n            <li\r\n              className=\"pagination-item dots\"\r\n              key={pageNumber + Math.random().toString()}\r\n            >\r\n              &#8230;\r\n            </li>\r\n          );\r\n        }\r\n\r\n        return (\r\n          <li\r\n            className={listItemClassName}\r\n            onClick={() => onPageChange(pageNumber as number)}\r\n            key={pageNumber}\r\n          >\r\n            {pageNumber}\r\n          </li>\r\n        );\r\n      })}\r\n      <li\r\n        className={lastPage ? 'pagination-item disabled' : 'pagination-item'}\r\n        onClick={onNext}\r\n      >\r\n        <div className=\"arrow right\" />\r\n      </li>\r\n    </ul>\r\n  );\r\n};\r\n","import React, { ChangeEvent, useEffect, useState } from 'react';\r\n\r\nimport { CircularProgress } from '@material-ui/core';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Link, Navigate } from 'react-router-dom';\r\n\r\nimport { PATH } from '../../enum';\r\nimport { Pagination } from '../pagination';\r\n\r\nimport {\r\n  addDeckTC,\r\n  deckTemplate,\r\n  removeDeckTC,\r\n  setCurrentPageAC,\r\n  setDecksTC,\r\n} from './decksTC';\r\nimport styleTable from './Table.module.css';\r\n\r\nimport { CustomButton, CustomInput, TableSidebar } from 'components/index';\r\nimport { useAppSelector } from 'hooks';\r\nimport {\r\n  getErrorNetworkMessage,\r\n  getIsDataLoaded,\r\n  RootStoreType,\r\n  setErrorMessageNetworkAC,\r\n} from 'store';\r\nimport { InitialStateProfileType } from 'store/reducers/profile';\r\nimport { getStatus } from 'store/selectors';\r\nimport { ReturnComponentType } from 'types';\r\n\r\nexport const Table = (): ReturnComponentType => {\r\n  const [searchName, setSearchName] = useState('');\r\n  const isAuth = useAppSelector(getIsDataLoaded);\r\n  const userData = useSelector<RootStoreType, InitialStateProfileType>(\r\n    state => state.profilePage,\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const errorNetworkMessage = useAppSelector(getErrorNetworkMessage);\r\n  const isLoading = useAppSelector(getStatus);\r\n  const cardPacks = useAppSelector(state => state.decks.cardPacks);\r\n  const totalCount = useAppSelector(state => state.decks.cardPacksTotalCount);\r\n  const currentPage = useAppSelector(state => state.decks.page);\r\n  const perPage = useAppSelector(state => state.decks.pageCount);\r\n\r\n  useEffect(() => {\r\n    dispatch(setDecksTC());\r\n  }, [dispatch, currentPage]);\r\n\r\n  const addButtonClick = (): void => {\r\n    dispatch(addDeckTC({}));\r\n  };\r\n  const onChangeSearchName = (e: ChangeEvent<HTMLInputElement>): void => {\r\n    setSearchName(e.currentTarget.value);\r\n  };\r\n  const onRemoveDeckClick = (id: string): void => {\r\n    dispatch(removeDeckTC(id));\r\n    dispatch(setErrorMessageNetworkAC(''));\r\n  };\r\n\r\n  const resultPacks = cardPacks.map((pack: deckTemplate) => (\r\n    <div className={styleTable.table} key={pack._id + pack.name}>\r\n      <div className={styleTable.tableEl}>{pack.name}</div>\r\n      <div className={styleTable.tableElSmall}>{pack.cardsCount}</div>\r\n      <div className={styleTable.tableEl}>{pack.user_name}</div>\r\n      <div className={styleTable.tableEl}>{pack.updated}</div>\r\n      <div className={styleTable.tableEl} style={{ display: 'flex' }}>\r\n        <Link to={`${PATH.CARDS}/${pack._id}`}>Learn</Link>\r\n        {userData.name === pack.user_name && (\r\n          <div style={{ display: 'flex' }}>\r\n            <CustomButton title=\"Del\" onClick={() => onRemoveDeckClick(pack._id)} />\r\n            <CustomButton title=\"Update\" onClick={() => {}} />\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  ));\r\n\r\n  if (!isAuth) {\r\n    return <Navigate to={PATH.PROFILE} />;\r\n  }\r\n\r\n  return (\r\n    <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n      {isLoading === 'loading' ? (\r\n        <CircularProgress />\r\n      ) : (\r\n        <div className={styleTable.content}>\r\n          <TableSidebar />\r\n          <div className={styleTable.tableWrapper}>\r\n            <h3 className={styleTable.header}> Packs list </h3>\r\n            <div className={styleTable.inputBlock}>\r\n              <CustomInput\r\n                onChange={onChangeSearchName}\r\n                value={searchName}\r\n                placeholder=\"Search\"\r\n                typeInput=\"search\"\r\n                /* onKeyPress={onEnterPress} */\r\n              />\r\n              <div>\r\n                <CustomButton title=\"Add new pack\" onClick={addButtonClick} />\r\n              </div>\r\n            </div>\r\n\r\n            <div className={styleTable.table}>\r\n              <div className={styleTable.tableEl}>Name</div>\r\n              <div className={styleTable.tableElSmall}>CardsCount</div>\r\n              <div className={styleTable.tableEl}>Created by</div>\r\n              <div className={styleTable.tableEl}>Updated</div>\r\n              <div className={styleTable.tableEl}>Actions</div>\r\n            </div>\r\n            {errorNetworkMessage && (\r\n              <span style={{ color: 'red' }}> {errorNetworkMessage} </span>\r\n            )}\r\n            {resultPacks}\r\n            <Pagination\r\n              currentPage={currentPage}\r\n              totalCount={totalCount}\r\n              pageSize={perPage}\r\n              onPageChange={(page: number) => dispatch(setCurrentPageAC(page))}\r\n            />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React, { ChangeEvent, useState } from 'react';\r\n\r\nimport style from './Range.module.css';\r\n\r\nexport const SuperRange = (): any => {\r\n  const initialValue = 0;\r\n  const [number, setNumber] = useState<number>(initialValue);\r\n  const onChangeRange = (e: ChangeEvent<HTMLInputElement>): void => {\r\n    setNumber(+e.currentTarget.value);\r\n  };\r\n  return (\r\n    <div>\r\n      {number}\r\n      <input\r\n        type=\"range\"\r\n        onChange={onChangeRange}\r\n        value={number}\r\n        className={style.range}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { RootStoreType } from '../../store';\r\nimport { deckTemplate, fetchDecksAC, setMyDecksTC } from '../table/decksTC';\r\n\r\nimport s from './tableSidebar.module.css';\r\n\r\nimport { CustomButton } from 'components';\r\nimport { SuperRange } from 'components/table';\r\n\r\nexport const TableSidebar = React.memo(() => {\r\n  const dispatch = useDispatch();\r\n  const decks = useSelector<RootStoreType, deckTemplate[]>(\r\n    state => state.decks.cardPacks,\r\n  );\r\n\r\n  const myPacks = decks.filter(deck => deck.user_name === 'samutic40@gmail.com');\r\n\r\n  const onFilterMyPacksClick = (): void => {\r\n    dispatch(\r\n      fetchDecksAC({\r\n        cardPacksTotalCount: 0,\r\n        maxCardsCount: 0,\r\n        minCardsCount: 0,\r\n        page: 0,\r\n        pageCount: 0,\r\n        cardPacks: myPacks,\r\n      }),\r\n    );\r\n  };\r\n  const onAllButtonClick = (): void => {\r\n    dispatch(setMyDecksTC());\r\n  };\r\n  return (\r\n    <div className={s.tableSidebar}>\r\n      <div className={s.pickBlock}>\r\n        <h3 className={s.header3}>Show cards packs</h3>\r\n        <div className={s.buttonsContainer}>\r\n          <CustomButton title=\"My\" onClick={onFilterMyPacksClick} />\r\n          <CustomButton title=\"All\" onClick={onAllButtonClick} />\r\n        </div>\r\n      </div>\r\n      <div className={s.pickBlock}>\r\n        <div>Number of cards</div>\r\n        <SuperRange />\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n","import React from 'react';\r\n\r\nimport styleCustomButton from '../../style/CustomButton.module.css';\r\n\r\ntype ButtonPropsType = {\r\n  title: string;\r\n  onClick: () => void;\r\n  disabled?: boolean;\r\n};\r\n\r\nexport const CustomButton = React.memo((props: ButtonPropsType) => {\r\n  const { onClick, title, disabled } = props;\r\n  const onButtonClick = (): any => {\r\n    onClick();\r\n  };\r\n  return (\r\n    <button\r\n      className={styleCustomButton.button}\r\n      onClick={onButtonClick}\r\n      disabled={disabled}\r\n    >\r\n      {title}\r\n    </button>\r\n  );\r\n});\r\n","import React, { useState } from 'react';\r\n\r\nimport { CircularProgress } from '@material-ui/core';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Link, Navigate } from 'react-router-dom';\r\n\r\nimport { PATH } from '../../enum';\r\nimport style from '../../style/Common.module.css';\r\nimport { CustomButton } from '../customButton';\r\nimport { CustomInput } from '../customInput';\r\n\r\nimport { AddNewPassType } from 'api';\r\nimport { useAppSelector, useInput } from 'hooks';\r\nimport {\r\n  forgotPassAddEmailTC,\r\n  getErrorNetworkMessage,\r\n  getErrorValidMessage,\r\n  getStatus,\r\n  setErrorMessagePassAC,\r\n} from 'store';\r\nimport { ReturnComponentType } from 'types';\r\nimport { isEmailValid } from 'utils';\r\n\r\nexport const ConfirmPassword = (): ReturnComponentType => {\r\n  const [isShown, setShowMessage] = useState(false);\r\n  const { value: email, handleValue: handleEmail, resetValue: resetEmail } = useInput('');\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const errorPassMessage = useAppSelector(getErrorValidMessage);\r\n  const errorNetworkMessage = useAppSelector(getErrorNetworkMessage);\r\n  const isLoading = useAppSelector(getStatus);\r\n\r\n  const dataPayload: AddNewPassType = {\r\n    email,\r\n    from: 'test-front-admin <samutic40@gmail.com>',\r\n    message: `<div style='background-color: #ffd500; \r\npadding: 15px; \r\nborder-color: #ff9900; \r\nwidth: 250px;\r\nheight: 30px'> \r\npassword recovery link: <a href='http://localhost:3000/#/createNewPassword/$token$'> recovery link </a></div>`,\r\n  };\r\n\r\n  const timeOut = 2000;\r\n  const onSendButtonClick = (): void => {\r\n    if (isEmailValid(email)) {\r\n      dispatch(forgotPassAddEmailTC(dataPayload, setShowMessage));\r\n      resetEmail('');\r\n    } else {\r\n      dispatch(setErrorMessagePassAC('invalid email ;-('));\r\n      setTimeout(() => {\r\n        dispatch(setErrorMessagePassAC(''));\r\n      }, timeOut);\r\n    }\r\n  };\r\n\r\n  if (isShown) {\r\n    return <Navigate to=\"/popup\" />;\r\n  }\r\n\r\n  return (\r\n    <div className={style.mainContainer}>\r\n      {isLoading === 'loading' ? (\r\n        <CircularProgress />\r\n      ) : (\r\n        <div className={style.content}>\r\n          <h2>Forgot your password?</h2>\r\n          {errorPassMessage && <span style={{ color: 'red' }}> {errorPassMessage} </span>}\r\n          {errorNetworkMessage && (\r\n            <span style={{ color: 'red' }}> {errorNetworkMessage} </span>\r\n          )}\r\n          <div className={style.inputCentering}>\r\n            <CustomInput\r\n              placeholder=\"Email\"\r\n              typeInput=\"email\"\r\n              onChange={handleEmail}\r\n              value={email}\r\n            />\r\n          </div>\r\n          <p> Enter your email and we will send you further instructions</p>\r\n          <div>\r\n            <CustomButton title=\"Send instructions\" onClick={onSendButtonClick} />\r\n          </div>\r\n          <span>Did you remember your password?</span>\r\n          <Link to={PATH.LOGIN}> Try logging in </Link>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","export default __webpack_public_path__ + \"static/media/error404.688fee4d.gif\";","import { Dispatch } from 'redux';\r\n\r\nimport { setAppStatusAC } from '../reducers';\r\nimport { setErrorMessageNetworkAC } from '../reducers/errorReducer';\r\n\r\nimport { addNewPassAPI, AddNewPassType } from 'api/forgotPasswordApi';\r\nimport { requestStatus } from 'enum';\r\n\r\nexport const forgotPassAddEmailTC =\r\n  (dataPayload: AddNewPassType, setShowMessage: any) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC(requestStatus.loading));\r\n    addNewPassAPI\r\n      .addNewPass(dataPayload)\r\n      .then(() => {\r\n        setShowMessage(true);\r\n        dispatch(setAppStatusAC(requestStatus.succeeded));\r\n      })\r\n      .catch(e => {\r\n        dispatch(setAppStatusAC(requestStatus.succeeded));\r\n        const errorNetwork = e.response\r\n          ? e.response.data.error\r\n          : `${e.message}, more details in the console`;\r\n        dispatch(setErrorMessageNetworkAC(errorNetwork));\r\n        const timeOut = 2000;\r\n        setTimeout(() => {\r\n          dispatch(setErrorMessageNetworkAC(''));\r\n        }, timeOut);\r\n      });\r\n  };\r\n","import React, { useState } from 'react';\r\n\r\nimport { CircularProgress } from '@material-ui/core';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Navigate, useParams } from 'react-router-dom';\r\n\r\nimport style from '../../style/Common.module.css';\r\nimport { CustomButton } from '../customButton';\r\nimport { CustomInput } from '../customInput';\r\n\r\nimport { SetNewPassType } from 'api';\r\nimport { PATH, requestStatus } from 'enum';\r\nimport { useAppSelector, useInput } from 'hooks';\r\nimport {\r\n  forgotPassSetPassTC,\r\n  getErrorNetworkMessage,\r\n  getErrorValidMessage,\r\n  getStatus,\r\n  setAppStatusAC,\r\n  setErrorMessagePassAC,\r\n} from 'store';\r\nimport { ReturnComponentType } from 'types';\r\nimport { isPasswordValid } from 'utils';\r\n\r\nexport const CreateNewPassword = (): ReturnComponentType => {\r\n  const [isLoadedData, setLoadedData] = useState(false);\r\n  const {\r\n    value: newPassword,\r\n    handleValue: handleNewPassword,\r\n    resetValue: resetNewPassword,\r\n  } = useInput('');\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const errorPassMessage = useAppSelector(getErrorValidMessage);\r\n  const errorNetworkMessage = useAppSelector(getErrorNetworkMessage);\r\n  const isLoading = useAppSelector(getStatus);\r\n\r\n  const params = useParams<'token'>();\r\n  const { token } = params as { token: string };\r\n\r\n  const data: SetNewPassType = {\r\n    password: newPassword,\r\n    resetPasswordToken: token,\r\n  };\r\n\r\n  const timeOut = 2000;\r\n  const onCreateButtonClick = (): void => {\r\n    if (isPasswordValid(newPassword)) {\r\n      dispatch(setAppStatusAC(requestStatus.loading));\r\n      dispatch(forgotPassSetPassTC(data, setLoadedData));\r\n\r\n      dispatch(setAppStatusAC(requestStatus.succeeded));\r\n      resetNewPassword();\r\n    } else {\r\n      dispatch(setErrorMessagePassAC('invalid password ;-('));\r\n      setTimeout(() => {\r\n        dispatch(setErrorMessagePassAC(''));\r\n      }, timeOut);\r\n    }\r\n  };\r\n\r\n  if (isLoadedData) {\r\n    return <Navigate to={PATH.LOGIN} />;\r\n  }\r\n\r\n  return (\r\n    <div className={style.mainContainer}>\r\n      {isLoading === requestStatus.loading ? (\r\n        <CircularProgress />\r\n      ) : (\r\n        <div className={style.content}>\r\n          <h2>Create new password</h2>\r\n          {errorPassMessage && <span style={{ color: 'red' }}> {errorPassMessage} </span>}\r\n          {errorNetworkMessage && (\r\n            <span style={{ color: 'red' }}> {errorNetworkMessage} </span>\r\n          )}\r\n          <div className={style.inputCentering}>\r\n            <CustomInput\r\n              placeholder=\"Password\"\r\n              typeInput=\"password\"\r\n              onChange={handleNewPassword}\r\n              value={newPassword}\r\n            />\r\n          </div>\r\n          <p> Create new password and we will send you further instructions to email</p>\r\n          <div>\r\n            <CustomButton title=\"Create new password\" onClick={onCreateButtonClick} />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import { Dispatch } from 'redux';\r\n\r\nimport { addNewPassAPI, SetNewPassType } from '../../api/forgotPasswordApi';\r\nimport { setErrorMessageNetworkAC } from '../reducers/errorReducer';\r\n\r\nexport const forgotPassSetPassTC =\r\n  (data: SetNewPassType, setLoadedData: any) => (dispatch: Dispatch) => {\r\n    addNewPassAPI\r\n      .setNewPass(data)\r\n      .then(() => {\r\n        setLoadedData(true);\r\n      })\r\n      .catch(e => {\r\n        const errorNetwork = e.response\r\n          ? e.response.data.error\r\n          : `${e.message}, more details in the console`;\r\n        dispatch(setErrorMessageNetworkAC(errorNetwork));\r\n        const timeOut = 2000;\r\n        setTimeout(() => {\r\n          dispatch(setErrorMessageNetworkAC(''));\r\n        }, timeOut);\r\n      });\r\n  };\r\n","export default __webpack_public_path__ + \"static/media/letter.3761fe05.png\";","import React from 'react';\r\n\r\nimport letter from '../../assets/letter.png';\r\nimport style from '../../style/Common.module.css';\r\nimport stylePopup from '../../style/Popup.module.css';\r\n\r\nimport { ReturnComponentType } from 'types';\r\n\r\nexport const Popup = (): ReturnComponentType => (\r\n  <div className={style.mainContainer}>\r\n    <div className={style.content}>\r\n      <img className={stylePopup.letterImg} src={letter} alt=\"letter\" />\r\n      <div className={style.contentWrap}>\r\n        <h2 className={stylePopup.heading}>Check Email</h2>\r\n        <p>We have sent the Email with instructions to your email </p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n","import React, { useEffect } from 'react';\r\n\r\nimport { CircularProgress } from '@material-ui/core';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nimport { cardType } from '../../api/cardsApi';\r\nimport { useAppSelector } from '../../hooks';\r\nimport { getErrorNetworkMessage, getStatus, setErrorMessageNetworkAC } from '../../store';\r\nimport {\r\n  addCardTC,\r\n  getCardsTC,\r\n  removeCardTC,\r\n  setCurrentPageCardsAC,\r\n  updateCardTC,\r\n} from '../../store/reducers/cards';\r\nimport { ReturnComponentType } from '../../types';\r\nimport { CustomButton } from '../customButton';\r\nimport { Pagination } from '../pagination';\r\nimport styleTable from '../table/Table.module.css';\r\n\r\nexport const Cards = (): ReturnComponentType => {\r\n  const errorNetworkMessage = useAppSelector(getErrorNetworkMessage);\r\n  const isLoading = useAppSelector(getStatus);\r\n  const cards = useAppSelector(state => state.cards.cards);\r\n  const userId = useAppSelector(state => state.profilePage._id);\r\n  const currentPage = useAppSelector(state => state.cards.page);\r\n  const totalCount = useAppSelector(state => state.cards.cardsTotalCount);\r\n  const perPage = useAppSelector(state => state.cards.pageCount);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const params = useParams<'cardsPack_id'>();\r\n  const { cardsPack_id } = params as { cardsPack_id: string };\r\n\r\n  const onClickRemoveCard = (_id: string): void => {\r\n    dispatch(removeCardTC(_id));\r\n    dispatch(setErrorMessageNetworkAC(''));\r\n  };\r\n\r\n  const onClickAddCard = (): void => {\r\n    dispatch(addCardTC({ cardsPack_id }));\r\n  };\r\n\r\n  const onClickUpdateCard = (_id: string, question: string, answer: string): void => {\r\n    dispatch(updateCardTC(_id, question, answer, cardsPack_id));\r\n  };\r\n\r\n  const resultCards = cards.map((card: cardType) => (\r\n    <div className={styleTable.table} key={card._id}>\r\n      <div className={styleTable.tableEl}>{card.question}</div>\r\n      <div className={styleTable.tableElSmall}>{card.answer}</div>\r\n      <div className={styleTable.tableEl}>{card.updated}</div>\r\n      <div className={styleTable.tableEl}>{card.created}</div>\r\n      {userId === card.user_id && (\r\n        <div style={{ display: 'flex' }}>\r\n          <CustomButton title=\"Del\" onClick={() => onClickRemoveCard(card._id)} />\r\n          <CustomButton\r\n            title=\"Update\"\r\n            onClick={() => onClickUpdateCard(card._id, card.question, card.answer)}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  ));\r\n\r\n  useEffect(() => {\r\n    dispatch(getCardsTC(cardsPack_id));\r\n  }, [dispatch, cardsPack_id, currentPage]);\r\n  return (\r\n    <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n      {isLoading === 'loading' ? (\r\n        <CircularProgress />\r\n      ) : (\r\n        <div>\r\n          <div style={{ width: '100px', margin: '10px' }}>\r\n            <CustomButton title=\"Add card\" onClick={onClickAddCard} />\r\n          </div>\r\n          {errorNetworkMessage && (\r\n            <span style={{ color: 'red' }}> {errorNetworkMessage} </span>\r\n          )}\r\n          <div className={styleTable.table}>\r\n            <div className={styleTable.tableEl}>Name</div>\r\n            <div className={styleTable.tableElSmall}>CardsCount</div>\r\n            <div className={styleTable.tableEl}>Created by</div>\r\n            <div className={styleTable.tableEl}>Updated</div>\r\n            <div className={styleTable.tableEl}>Actions</div>\r\n          </div>\r\n          {resultCards}\r\n          <Pagination\r\n            currentPage={currentPage}\r\n            totalCount={totalCount}\r\n            pageSize={perPage}\r\n            onPageChange={(curPage: number) => dispatch(setCurrentPageCardsAC(curPage))}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport { PATH } from '../../enum';\r\nimport { getIsDataLoaded, logOutTC } from '../../store';\r\nimport { ReturnComponentType } from '../../types';\r\n\r\nimport { useAppSelector } from 'hooks';\r\nimport styleHeader from 'style/Header.module.css';\r\n\r\nexport const Header = (): ReturnComponentType => {\r\n  const isAuth = useAppSelector(getIsDataLoaded);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const onClickLogOut = (): void => {\r\n    dispatch(logOutTC());\r\n  };\r\n\r\n  return (\r\n    <div className={styleHeader.containerHeader}>\r\n      <div style={{ display: 'flex' }}>\r\n        <button className={styleHeader.btnHeader}>\r\n          <NavLink className={styleHeader.link} to={PATH.PACKS}>\r\n            Packs\r\n          </NavLink>\r\n        </button>\r\n        <button className={styleHeader.btnHeader}>\r\n          <NavLink className={styleHeader.link} to={PATH.PROFILE}>\r\n            Profile\r\n          </NavLink>\r\n        </button>\r\n      </div>\r\n      {isAuth && (\r\n        <button className={styleHeader.btnHeader} onClick={onClickLogOut}>\r\n          LogOut\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nimport s from './cards.module.css';\r\n\r\nimport { Preloader } from 'components';\r\nimport { PATH, requestStatus } from 'enum';\r\nimport { useAppSelector, useInput } from 'hooks';\r\nimport { getStatus } from 'store/selectors';\r\nimport style from 'style/Common.module.css';\r\nimport { ReturnComponentType } from 'types';\r\n\r\nexport const Card = (): ReturnComponentType => {\r\n  const { value: question, handleValue: handleQuestion } = useInput('');\r\n  const { value: answer, handleValue: handleAnswer } = useInput('');\r\n  /* const grade = useAppSelector(state => state.cards.grade);\r\n  const shots = useAppSelector(state => state.cards.shots);\r\n  // const cardsPackId = useAppSelector(state => state.decks);\r\n  const dispatch = useDispatch(); */\r\n  const navigate = useNavigate();\r\n  const isLoading = useAppSelector(getStatus);\r\n  const onClickHandleCancel = (): void => {\r\n    navigate(PATH.CARDS);\r\n  };\r\n  /* const onClickAddCard = (): void => {\r\n    dispatch(addCardTC({ cardsPack_id, question, answer, grade, shots }));\r\n  }; */\r\n  return (\r\n    <div className={style.mainContainer}>\r\n      {isLoading === requestStatus.loading ? (\r\n        <Preloader />\r\n      ) : (\r\n        <div className={s.contentCard}>\r\n          <div className={style.contentWrap}>\r\n            <h2> Card </h2>\r\n            <div className={s.container}>\r\n              <textarea\r\n                className={s.textarea}\r\n                placeholder=\"Question\"\r\n                value={question}\r\n                onChange={handleQuestion}\r\n              />\r\n              <textarea\r\n                className={s.textarea}\r\n                placeholder=\"Answer\"\r\n                value={answer}\r\n                onChange={handleAnswer}\r\n              />\r\n            </div>\r\n            <div className={s.buttons}>\r\n              <button className={s.btn} onClick={onClickHandleCancel}>\r\n                Cancel\r\n              </button>\r\n              <button className={s.btn} onClick={() => {}}>\r\n                Add card\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nimport { Route, Routes } from 'react-router-dom';\r\n\r\nimport { PATH } from '../../enum';\r\nimport { ReturnComponentType } from '../../types';\r\nimport { Cards } from '../cards';\r\nimport { Card } from '../cards/Card';\r\nimport { ConfirmPassword, CreateNewPassword, Popup } from '../confirmPassword';\r\nimport { Login } from '../loginPage';\r\nimport { Profile } from '../profile';\r\nimport { SignUp } from '../registrations';\r\nimport { Table } from '../table';\r\n\r\nexport const RoutesPart = (): ReturnComponentType => (\r\n  <Routes>\r\n    <Route path={PATH.LOGIN} element={<Login />} />\r\n    <Route path={PATH.REGISTRATION} element={<SignUp />} />\r\n    <Route path={PATH.PROFILE} element={<Profile />} />\r\n    {/* <Route path={PATH.PAGE_404} element={<PageError404 />} /> */}\r\n    <Route path={PATH.CONFIRM_PASSWORD} element={<ConfirmPassword />} />\r\n    <Route path={PATH.POPUP} element={<Popup />} />\r\n    <Route path={PATH.CREATE_NEW_PASSWORD} element={<CreateNewPassword />}>\r\n      <Route path=\":token\" element={<CreateNewPassword />} />\r\n    </Route>\r\n    <Route path={PATH.CARDS} element={<Cards />}>\r\n      <Route path=\":cardsPack_id\" element={<Cards />} />\r\n    </Route>\r\n    <Route path={PATH.CARD} element={<Card />} />\r\n    <Route path={PATH.PACKS} element={<Table />} />\r\n  </Routes>\r\n);\r\n","import React, { useEffect } from 'react';\r\n\r\nimport { CircularProgress } from '@material-ui/core';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { Header } from './components';\r\nimport { RoutesPart } from './components/Routes/RoutesPart';\r\nimport { useAppSelector } from './hooks';\r\nimport styleApp from './style/App.module.css';\r\nimport { ReturnComponentType } from './types';\r\n\r\nimport { getIsDataLoaded, getStatus, initializeAppTC } from 'store';\r\n\r\nexport const App = (): ReturnComponentType => {\r\n  const isAuth = useAppSelector(getIsDataLoaded);\r\n  const isInitialized = useAppSelector(getStatus);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(initializeAppTC());\r\n  }, [dispatch]);\r\n\r\n  if (!isInitialized) {\r\n    return <CircularProgress />;\r\n  }\r\n\r\n  return (\r\n    <div className={styleApp.app}>\r\n      <div className={styleApp.layout}>\r\n        {isAuth ? <Header /> : <div />}\r\n\r\n        <RoutesPart />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { applyMiddleware, combineReducers, createStore } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nimport { decksReducer } from '../components/table/decksTC';\r\n\r\nimport { errorForgotPasswordReducer } from './reducers/errorReducer';\r\nimport { signUpReducer } from './reducers/signUp';\r\n\r\nimport { appReducer, cardReducer, loginReducer, profileReducer } from 'store';\r\n\r\nexport const rootReducer = combineReducers({\r\n  cards: cardReducer,\r\n  signUp: signUpReducer,\r\n  login: loginReducer,\r\n  profilePage: profileReducer,\r\n  errorMessage: errorForgotPasswordReducer,\r\n  app: appReducer,\r\n  decks: decksReducer,\r\n});\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport type RootStoreType = ReturnType<typeof rootReducer>;\r\n\r\n// @ts-ignore\r\n\r\nwindow.store = store;\r\n","import React from 'react';\r\n\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { Provider } from 'react-redux';\r\nimport { HashRouter } from 'react-router-dom';\r\n\r\nimport { App } from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { store } from './store/store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <HashRouter>\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n    </HashRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}